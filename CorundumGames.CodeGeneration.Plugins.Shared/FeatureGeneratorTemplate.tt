<#@ template language="C#" hostspecific="false" visibility="public" #>
<#@ import namespace="System.Collections.Generic" #>

public sealed class <#= _featureName #> : Feature
{
    public <#= _featureName #>(Contexts contexts) : base("<#= _featureName #>")
    {
<#
    foreach (var name in _systemNames)
    {
#>
        Add(new <#= name #>(contexts));
<#
    }
#>
    }
}

<#+
    private readonly string _featureName;
    private readonly IReadOnlyCollection<string> _systemNames;

    /// <summary>
    /// Generates Entitas <c>Feature</c>s in accordance with the common conventions; no namespace, each
    /// system takes a single <c>Contexts</c> argument. If you need more, write your own template.
    /// </summary>
    public FeatureGeneratorTemplate(string featureName, IReadOnlyCollection<string> systemNames)
    {
        _featureName = featureName ?? throw new ArgumentNullException(nameof(featureName));
        _systemNames = systemNames ?? throw new ArgumentNullException(nameof(systemNames));
    }
#>
