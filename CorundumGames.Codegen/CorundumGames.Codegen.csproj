<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup Label="Assembly Properties">
        <!-- These two properties don't have to be the same, but they usually are in practice. -->
        <RootNamespace>CorundumGames.Codegen</RootNamespace>
        <AssemblyName>$(RootNamespace)</AssemblyName>

        <OutputType>Library</OutputType>
        <!-- We use net472 for compatibility with Jenny.exe, which was built against this framework. -->
        <TargetFramework>net472</TargetFramework>

        <!-- Newer version of .NET let you implicitly import common System libraries. I don't want to do that. -->
        <ImplicitUsings>false</ImplicitUsings>
        <Nullable>enable</Nullable>

        <Deterministic>true</Deterministic>
        <Version>0.0.0</Version>


        <!-- If you use Jenny plugins separately from Unity, you can use the latest C# features -->
        <LangVersion>10</LangVersion>
    </PropertyGroup>
    <PropertyGroup Label="Package Properties">
        <PackageId>$(AssemblyName)</PackageId>
        <Authors>Jesse Talavera-Greenberg</Authors>
        <Company>Corundum Games, LLC</Company>
        <Copyright>$(Company)</Copyright>
        <PackageVersion>$(Version)</PackageVersion>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <Description>Codegen plugins for Entitas</Description>
        <PackageProjectUrl>https://github.com/CorundumGames/CorundumGames.Codegen</PackageProjectUrl>
        <PackageTags>Entitas;code generation;Unity;code generator;roslyn;ecs</PackageTags>
    </PropertyGroup>
    <ItemGroup Label="Dependencies">
        <!-- Most Entitas libraries and dependencies can now be installed by NuGet (this greatly simplifies the project file and distribution) -->

        <PackageReference Include="DesperateDevs.CodeGeneration" Version="0.1.0" />
        <PackageReference Include="DesperateDevs.CodeGeneration.Plugins" Version="0.1.0" />
        <PackageReference Include="DesperateDevs.Roslyn" Version="0.1.0" />
        <PackageReference Include="DesperateDevs.Roslyn.CodeGeneration.Plugins" Version="0.1.0" />
        <PackageReference Include="DesperateDevs.Serialization" Version="0.1.0" />
        <PackageReference Include="DesperateDevs.Utils" Version="0.1.0" />
        <PackageReference Include="Entitas" Version="1.13.0" />
        <PackageReference Include="Entitas.CodeGeneration.Attributes" Version="1.13.0" />
        <PackageReference Include="Entitas.CodeGeneration.Plugins" Version="1.13.0" />
        <PackageReference Include="JetBrains.Annotations" Version="2021.3.0" />
        <PackageReference Include="Microsoft.CodeAnalysis" Version="3.11.0" />

        <!-- Installs the T4 generator so it's called in the TextTemplateTransform target -->
        <DotNetCliToolReference Include="dotnet-t4-project-tool" Version="2.2.1" /> 
    </ItemGroup>
    <ItemDefinitionGroup Label="Template Defaults"> <!-- Applies this metadata to all <None> elements -->
        <None>
            <Generator>TextTemplatingFilePreprocessor</Generator>
        </None>
    </ItemDefinitionGroup>
    
    <Target Name="TextTemplateTransform" BeforeTargets="BeforeBuild">
        <!-- Before the code is compiled, we want to generate the code generators from the T4 templates. -->
        <!-- Your IDE may do this for you, but the build process might not. -->
        <Exec WorkingDirectory="$(ProjectDir)" Command="dotnet t4 -c %(None.CustomToolNamespace).%(None.Filename) -o %(None.RelativeDir)%(None.Filename).cs %(None.Identity)" />
        <ItemGroup>
            <Compile Include="%(None.RelativeDir)%(None.Filename).cs" />
            <!-- May result in "file specified multiple times" warning -->
        </ItemGroup>
    </Target>

    <ItemGroup Label="Templates">
        <None Update="Shared\FeatureGeneratorTemplate.tt">
            <CustomToolNamespace>$(RootNamespace).Shared</CustomToolNamespace>
            <LastGenOutput>FeatureGeneratorTemplate.cs</LastGenOutput>
        </None>
        <None Update="DisposableComponent\SystemTemplate.tt">
            <CustomToolNamespace>$(RootNamespace).DisposableComponent</CustomToolNamespace>
            <LastGenOutput>SystemTemplate.cs</LastGenOutput>
        </None>
        <Compile Update="DisposableComponent\SystemTemplate.cs">
            <DesignTime>True</DesignTime>
            <AutoGen>True</AutoGen>
            <DependentUpon>SystemTemplate.tt</DependentUpon>
        </Compile>
        <Compile Update="Shared\FeatureGeneratorTemplate.cs"> <!-- TODO: Update via wildcard -->
            <AutoGen>True</AutoGen>
            <DesignTime>True</DesignTime>
            <DependentUpon>FeatureGeneratorTemplate.tt</DependentUpon>
        </Compile>
    </ItemGroup>

</Project>
